// State machine library
// 
// 
module Funim.Machine;

// A state machine that takes input of type i, changes its internal state, and outputs a value of type o
type Machine i o = struct {
    _run : i -> IO (Machine i o, o),
};

impl Machine i : Functor {
    map = |f, machine| (
        Machine {
            _run : |i| (
                let (machine, o) = *machine.run(i);
                pure $ (machine.map(f), f(o))
            )
        }
    );
}

namespace Machine {
    // Advance the machine by one step
    run : i -> Machine i o -> IO (Machine i o, o);
    run = |i, machine| (
        let (machine, o) = *(machine.@_run)(i);
        pure $ (machine, o)
    );

    // Create an object from the initial state and state transition function
    from_transition : s -> (i -> s -> (s, o)) -> Machine i o;
    from_transition = |state, update| (
        Machine {
            _run : |i| (
                let (state, o) = update(i, state);
                pure $ (from_transition(state, update), o)
            )
        }
    );

    // Create an object from the initial state and state transition function with IO
    from_transition_io : s -> (i -> s -> IO (s, o)) -> Machine i o;
    from_transition_io = |state, update| (
        Machine {
            _run : |i| (
                let (state, o) = *update(i, state);
                pure $ (from_transition_io(state, update), o)
            )
        }
    );

    // Create a machine that outputs the input as is.
    identity : Machine i i;
    identity = from_transition((), |i, _| ((), i));

    // Create a machine that calculates the cumulative sum of inputs.
    // 
    // The first output is 0, and subsequent outputs are the cumulative sum of inputs up to that point.
    integrate : [o : Additive] Machine o o;
    integrate = from_transition(zero, |i, sum| (sum + i, sum));
}

test_machine : [o : Eq, o : ToString] Machine i o -> Array (i, o) -> IO ();
test_machine = |machine, ios| (
    ios.to_iter.fold_m(machine, |(i, o), machine|
        let (machine, o1) = *machine.run(i);
        assert_eq(|_|"Test Fail", o1, o);;
        pure $ machine
    ).forget
);

test : IO ();
test = (
    let machine = Machine::integrate;
    let input = [1, 2, 3, 4, 5];
    let output = [0, 1, 3, 6, 10];
    let ios = input.to_iter.zip(output.to_iter).to_array;
    test_machine(machine, ios);;
    pure()
);